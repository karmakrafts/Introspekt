/*
 * Copyright 2025 Karma Krafts & associates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dev.karmakrafts.introspekt

import co.touchlab.stately.collections.SharedHashMap
import kotlin.reflect.KFunction

data class SourceLocation( // @formatter:off
    val module: String,
    val file: String,
    val line: Int,
    val column: Int
) { // @formatter:on
    companion object {
        private val cache: SharedHashMap<Int, SourceLocation> = SharedHashMap()

        private fun hash(module: String, file: String, line: Int, column: Int): Int {
            var result = module.hashCode()
            result = 31 * result + file.hashCode()
            result = 31 * result + line
            result = 31 * result + column
            return result
        }

        @IntrospektCompilerApi
        internal fun getOrCreate(module: String, file: String, line: Int, column: Int): SourceLocation {
            return cache.getOrPut(hash(module, file, line, column)) {
                SourceLocation(module, file, line, column)
            }
        }

        /**
         * A value used for either [SourceLocation.line] or [SourceLocation.column]
         * if the associated element was added as a fake-override.
         * This includes default functions from interfaces.
         */
        const val FAKE_OVERRIDE_OFFSET: Int = -1

        /**
         * A value used for either [SourceLocation.line] or [SourceLocation.column]
         * if the associated element was generated by an IR processor of some sort.
         */
        const val SYNTHETIC_OFFSET: Int = -2

        /**
         * A value used for either [SourceLocation.line] or [SourceLocation.column]
         * if the associated element has no source context within the current module.
         * This includes Kotlin standard library types.
         */
        const val UNDEFINED_OFFSET: Int = -3

        @IntrospektIntrinsic(IntrospektIntrinsic.SL_HERE)
        fun here(): SourceLocation = throw IntrospektPluginNotAppliedException()

        @IntrospektIntrinsic(IntrospektIntrinsic.SL_HERE_HASH)
        fun hereHash(): Int = throw IntrospektPluginNotAppliedException()

        @IntrospektIntrinsic(IntrospektIntrinsic.SL_CURRENT_FUNCTION)
        fun currentFunction(): SourceLocation = throw IntrospektPluginNotAppliedException()

        @IntrospektIntrinsic(IntrospektIntrinsic.SL_CURRENT_FUNCTION_HASH)
        fun currentFunctionHash(): Int = throw IntrospektPluginNotAppliedException()

        @IntrospektIntrinsic(IntrospektIntrinsic.SL_CURRENT_CLASS)
        fun currentClass(): SourceLocation = throw IntrospektPluginNotAppliedException()

        @IntrospektIntrinsic(IntrospektIntrinsic.SL_CURRENT_CLASS_HASH)
        fun currentClassHash(): Int = throw IntrospektPluginNotAppliedException()

        @IntrospektIntrinsic(IntrospektIntrinsic.SL_OF_CLASS)
        fun <T : Any> ofClass(): SourceLocation = throw IntrospektPluginNotAppliedException()

        @IntrospektIntrinsic(IntrospektIntrinsic.SL_OF_FUNCTION)
        fun ofFunction(function: KFunction<*>): SourceLocation = throw IntrospektPluginNotAppliedException()
    }

    inline val isFakeOverride: Boolean
        get() = line == FAKE_OVERRIDE_OFFSET || column == FAKE_OVERRIDE_OFFSET

    inline val isSynthetic: Boolean
        get() = line == SYNTHETIC_OFFSET || column == SYNTHETIC_OFFSET

    inline val isUndefined: Boolean
        get() = line == UNDEFINED_OFFSET || column == UNDEFINED_OFFSET

    override fun toString(): String = when {
        isFakeOverride -> "$file (FAKE OVERRIDE)"
        isSynthetic -> "$file (GENERATED)"
        isUndefined -> "(UNDEFINED/EXTERNAL)"
        else -> "$file:$line:$column"
    }
}
